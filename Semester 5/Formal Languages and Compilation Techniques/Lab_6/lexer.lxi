%option noyywrap
%option yylineno

%{ 				
    #include <iostream>
    #include "parser.hpp"
%} 

LID      [a-zA-Z_][a-zA-Z0-9_]*
LINTEGER [-+]?[0-9]+(x|X)?([0-9]+|a|A|b|B|c|C|d|D|e|E|f|F)*((l|L|u|U)+(z|Z)*)?
WS       [ \t\r\n]

%%

"#"             { return HASH; }
"<<"            { return LEFT_SHIFT; }
">>"            { return RIGHT_SHIFT; }
"<"             { return LESS_THAN; }
">"             { return GREATER_THAN; }
"{"             { return LEFT_BRACE; }
"}"             { return RIGHT_BRACE; }
"("             { return LEFT_PAREN; }
")"             { return RIGHT_PAREN; }
";"             { return SEMICOLON; }
","             { return COMMA; }
"+"             { yylval.value = strdup(yytext); return PLUS; }
"-"             { yylval.value = strdup(yytext); return MINUS; }
"*"             { yylval.value = strdup(yytext); return MULTIPLY; }
"/"             { yylval.value = strdup(yytext); return DIVIDE; }
"="             { return EQUAL; }
"cout"          { return COUT; }
"cin"           { return CIN; }
"return"        { return RETURN; }
"using"         { return USING; }
"namespace"     { return NAMESPACE; }
"std"           { return STD; }
"include"       { return INCLUDE; }
"iostream"      { return IOSTREAM; }
"main"          { return MAIN; }
"int"           { return INT; }
 
{LINTEGER}      { yylval.value = strdup(yytext); return CONST; }
{LID}           { if(yyleng <= 8) {yylval.value = strdup(yytext); return ID;} std::cout << "Error at line " << yylineno << ". Length extended 8 characters.\n"; exit(1); }
{WS}+           ; 
.               { std::cout << "Error at line " << yylineno << ". Unexpected character: " << yytext << '\n'; exit(1); }

%%
